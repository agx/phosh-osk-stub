include:
 - remote: 'https://gitlab.freedesktop.org/freedesktop/ci-templates/-/raw/34039cd573a2df832d465bc9e4c5f543571f5241/templates/ci-fairy.yml'

stages:
 - build
 - test+docs
 - style-checks
 - deploy

default:
  # Protect CI infra from rogue jobs
  timeout: 15 minutes
  # Allow jobs to be caneled on new commits
  interruptible: true
  # Retry on infra hickups automatically
  retry:
    max: 1
    when:
      - 'api_failure'
      - 'runner_system_failure'
      - 'scheduler_failure'
      - 'stuck_or_timeout_failure'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    # Don't trigger a branch pipeline if there is an open MR
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

variables:
  # For ci-fairy
  FDO_UPSTREAM_REPO: guidog/phosh-osk-stub
  DEBIAN_IMAGE: $CI_REGISTRY/guidog/phosh-osk-stub/debian:v0.0.2024-06-19
  XVFB_RUN: xvfb-run -a -s -noreset
  COMMON_BUILD_OPTS: --werror -Db_coverage=true
  ALPINE_EDGE_DEPS: alpine-sdk feedbackd-dev git glib-dev gnome-desktop-dev
                    gtk+3.0-dev libhandy1-dev meson musl-dev ninja json-glib-dev
                    elogind-dev wayland-dev wayland-protocols ttf-dejavu presage-dev

.trixie_vars: &trixie_vars
  variables:
    DIST: trixie
    BUILD_OPTS:  ${COMMON_BUILD_OPTS}

.trixie_prep: &trixie_prep
  before_script:
    - apt-get -y update
    - apt-get -y build-dep .

.build_step: &build_step
  script:
    - 'echo "Build opts: ${BUILD_OPTS}"'
    - meson ${BUILD_OPTS} . _build
    - meson compile -C _build

.test_step: &test_step
  script:
    - ${XVFB_RUN} meson test --print-errorlogs -C _build
    - ninja  -C _build coverage-html

# Sanity checks of MR settings and commit logs
sanity:
  extends:
    - .fdo.ci-fairy
  stage: style-checks
  script: |
    ci-fairy check-commits --junit-xml=commit-message-junit-report.xml cifairy/main..HEAD ;
  artifacts:
    reports:
      junit: commit-message-junit-report.xml
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME'

build:native-debian-trixie:
  stage: build
  image: ${DEBIAN_IMAGE}
  <<: *trixie_prep
  <<: *trixie_vars
  <<: *build_step
  artifacts:
    paths:
      - _build
  except:
    variables:
      - $PKG_ONLY == "1"

test:native-debian-trixie:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  <<: *trixie_prep
  needs:
    - build:native-debian-trixie
  <<: *trixie_vars
  <<: *test_step
  coverage: '/^lines:\s+([\d.]+\%)\s+/'
  artifacts:
    when: always
    reports:
      junit: _build/meson-logs/testlog.junit.xml
  except:
    variables:
      - $PKG_ONLY == "1"

doc:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  <<: *trixie_prep
  needs: []
  variables:
    BUILD_OPTS: >-
      -Dgtk_doc=true
  script:
    - meson ${BUILD_OPTS} _build
    - meson compile -C _build
    - mv _build/doc/pos-0 _doc/
  artifacts:
    paths:
      - _doc/
  except:
    variables:
      - $PKG_ONLY == "1"

build:native-alpinelinux-edge:
  stage: build
  image: alpine:edge
  allow_failure: true
  before_script:
    - echo "https://alpine.global.ssl.fastly.net/alpine/edge/testing" >> /etc/apk/repositories
    - apk add $ALPINE_EDGE_DEPS
  artifacts:
    paths:
      - _build
  script:
    - git submodule update --recursive
    - meson --werror . _build
    - meson compile -C _build
  except:
    variables:
      - $PKG_ONLY == "1"

format-check:
  image: ${DEBIAN_IMAGE}
  stage: style-checks
  needs: []
  script:
    - |
      if [ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]; then
        git remote add target $CI_MERGE_REQUEST_PROJECT_URL.git
        echo "Fetching MR target branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME from $CI_MERGE_REQUEST_PROJECT_URL"
        git fetch target "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
        git fetch --deepen=100 origin HEAD
        merge_base=$(git merge-base "target/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" HEAD)
        if [ -z "$merge_base" ]; then
          echo "Could't determine merge base"
          exit 1
        fi
        echo "Merge base: $merge_base"
        ./.gitlab-ci/check-style.py --dry-run --sha $merge_base
      else
        echo "Not a merge request"
      fi
  allow_failure: true
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME'

pages:
  stage: deploy
  before_script: []
  needs: ['doc']
  script:
    - mv _doc/ public/
  artifacts:
    paths:
      - public
  only:
    - main
